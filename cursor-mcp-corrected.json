{
  "mcpServers": {
    "optidevdoc": {
      "command": "node",
      "args": [
        "-e",
        "const https = require('https'); const readline = require('readline'); const rl = readline.createInterface({ input: process.stdin, output: process.stdout, terminal: false }); rl.on('line', (line) => { try { const req = JSON.parse(line); if (req.method === 'tools/list') { console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, result: { tools: [{ name: 'search_optimizely_docs', description: 'Search Optimizely documentation', inputSchema: { type: 'object', properties: { query: { type: 'string', description: 'Search query' } }, required: ['query'] } }] } })); } else if (req.method === 'tools/call') { const options = { hostname: 'optidevdoc.onrender.com', port: 443, path: '/api/search', method: 'POST', headers: { 'Content-Type': 'application/json' } }; const apiReq = https.request(options, (res) => { let data = ''; res.on('data', (chunk) => data += chunk); res.on('end', () => { try { const apiResponse = JSON.parse(data); const content = apiResponse.results ? apiResponse.results.map(doc => doc.title + '\\n' + doc.content.substring(0, 500)).join('\\n\\n') : 'No results found'; console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, result: { content: [{ type: 'text', text: content }] } })); } catch (e) { console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, error: { code: -1, message: 'Parse error' } })); } }); }); apiReq.on('error', (e) => { console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, error: { code: -1, message: e.message } })); }); apiReq.write(JSON.stringify(req.params.arguments)); apiReq.end(); } } catch (e) {} });"
      ]
    }
  }
} 