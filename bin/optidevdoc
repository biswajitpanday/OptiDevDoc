#!/usr/bin/env node

/**
 * OptiDevDoc CLI - NPM Package Entry Point v2.1.0
 * Global CLI tool for Optimizely development assistance with Product-Aware features
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

const PACKAGE_ROOT = path.join(__dirname, '..');

// Check if we have the required files
const enhancedServerPath = path.join(PACKAGE_ROOT, 'src', 'deploy-server-enhanced.ts');
const simpleServerPath = path.join(PACKAGE_ROOT, 'src', 'deploy-server-simple.ts');
const remoteClientPath = path.join(PACKAGE_ROOT, 'optidevdoc-remote.js');

function printUsage() {
  console.log(`
OptiDevDoc v2.1.1 - Product-Aware Optimizely Development Assistant

USAGE:
  optidevdoc [COMMAND] [OPTIONS]

COMMANDS:
  mcp           Start enhanced MCP client with product-aware rules engine
  mcp-simple    Start simple MCP client (basic documentation search)
  detect        Detect Optimizely product in current directory
  migrate       Migrate existing rules to product-aware structure
  serve         Start local HTTP server
  serve-enhanced Start enhanced HTTP server with all features
  setup         Interactive setup for IDE configuration
  version       Show version information

OPTIONS:
  --debug       Enable debug mode with verbose logging
  --port PORT   Specify port for server mode (default: 3000)
  --help        Show this help message

EXAMPLES:
  optidevdoc mcp                    # Start enhanced MCP client with product detection
  optidevdoc detect                 # Detect Optimizely product in current project
  optidevdoc migrate                # Migrate rules to product-aware structure
  optidevdoc serve --port 3001      # Start server on port 3001
  optidevdoc setup                  # Interactive IDE setup with product rules
  optidevdoc --debug mcp            # Start MCP client with debug logs

🎉 NEW in v2.1.0: Product-Aware Rules Engine
   • Automatic detection of Commerce vs CMS vs Experimentation projects
   • Rule isolation - no cross-product contamination
   • Zero configuration setup

For more information, visit: https://github.com/biswajitpanday/OptiDevDoc
  `);
}

function printVersion() {
  const packagePath = path.join(PACKAGE_ROOT, 'package.json');
  try {
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    console.log(`OptiDevDoc v${packageData.version} - Product-Aware Release`);
    console.log(`🚀 Optimizely Development Assistant with Intelligent Product Detection`);
    console.log(`📚 Multi-product support: Commerce, CMS, CMP, ODP, Experimentation`);
    console.log(`🔧 Enhanced Tools: Pattern Search, Bug Analysis, Documentation Search, Rules Engine`);
    console.log(`🎯 Product-Aware: Rules automatically apply based on your project context`);
  } catch (error) {
    console.log('OptiDevDoc v2.1.2 - Product-Aware Release (tsx Execution Fix)');
  }
}

function detectOptimizelyProduct(options) {
  console.log('🔍 Detecting Optimizely Product...');
  
  const projectPath = process.cwd();
  console.log(`📁 Analyzing project: ${projectPath}\n`);
  
  // Enhanced detection logic for CLI
  const detectedFeatures = [];
  
  try {
    // Check for Commerce indicators
    if (fs.existsSync('Extensions') || fs.existsSync('InsiteCommerce.Web')) {
      detectedFeatures.push('🛒 Configured Commerce - Extensions directory found');
    }
    
    if (fs.existsSync('FrontEnd/modules/blueprints')) {
      detectedFeatures.push('🛒 Configured Commerce - Blueprint structure found');
    }
    
    if (fs.existsSync('FrontEnd/modules/content-library')) {
      detectedFeatures.push('🛒 Configured Commerce - Content library found');
    }
    
    // Check for CMS indicators
    if (fs.existsSync('modules') && fs.existsSync('App_Data')) {
      detectedFeatures.push('📝 CMS - Module structure found');
    }
    
    if (fs.existsSync('Views') && fs.existsSync('Models')) {
      detectedFeatures.push('📝 CMS - MVC structure found');
    }
    
    // Check package.json for dependencies
    if (fs.existsSync('package.json')) {
      const packageData = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      const allDeps = { ...packageData.dependencies, ...packageData.devDependencies };
      
      if (Object.keys(allDeps).some(dep => dep.includes('insite'))) {
        detectedFeatures.push('🛒 Configured Commerce - Insite dependencies found');
      }
      
      if (Object.keys(allDeps).some(dep => dep.includes('episerver'))) {
        detectedFeatures.push('📝 CMS - Episerver dependencies found');
      }
      
      if (Object.keys(allDeps).some(dep => dep.includes('@optimizely/optimizely-sdk'))) {
        detectedFeatures.push('🧪 Experimentation - SDK dependencies found');
      }
      
      if (Object.keys(allDeps).some(dep => dep.includes('react'))) {
        detectedFeatures.push('⚛️ React - Frontend framework detected');
      }
      
      if (Object.keys(allDeps).some(dep => dep.includes('typescript'))) {
        detectedFeatures.push('📘 TypeScript - Type safety detected');
      }
    }
    
    // Check for .csproj files
    const csprojFiles = fs.readdirSync('.').filter(file => file.endsWith('.csproj'));
    if (csprojFiles.length > 0) {
      detectedFeatures.push('⚙️ .NET Project - C# project files found');
    }
    
    // Check for web.config
    if (fs.existsSync('web.config') || fs.existsSync('Web.config')) {
      detectedFeatures.push('🌐 ASP.NET - Web configuration found');
    }
    
    if (detectedFeatures.length > 0) {
      console.log('✅ Detection Results:');
      detectedFeatures.forEach(feature => console.log(`   ${feature}`));
      console.log('\n💡 Recommendations:');
      
      if (detectedFeatures.some(f => f.includes('Configured Commerce'))) {
        console.log('   • Use Commerce-specific rules and patterns');
        console.log('   • Set OPTIMIZELY_PRODUCT=configured-commerce');
        console.log('   • Focus on Extensions/ and FrontEnd/ directories');
      }
      
      if (detectedFeatures.some(f => f.includes('CMS'))) {
        console.log('   • Use CMS-specific content development rules');
        console.log('   • Set OPTIMIZELY_PRODUCT=cms-paas');
        console.log('   • Focus on content blocks and templates');
      }
      
      if (detectedFeatures.some(f => f.includes('Experimentation'))) {
        console.log('   • Use Experimentation SDK patterns');
        console.log('   • Set OPTIMIZELY_PRODUCT=experimentation');
        console.log('   • Focus on A/B testing implementation');
      }
      
    } else {
      console.log('❓ No clear Optimizely product indicators found');
      console.log('   This might be a general project or a different Optimizely product');
      console.log('\n💡 You can manually specify the product:');
      console.log('   export OPTIMIZELY_PRODUCT=configured-commerce');
    }
    
    console.log('\n🚀 Next Steps:');
    console.log('   • Run "optidevdoc setup" to configure your IDE');
    console.log('   • Use "optidevdoc mcp" to start the development assistant');
    console.log('   • Try product-aware rules with context-sensitive guidance');
    
  } catch (error) {
    console.error('❌ Error during detection:', error.message);
  }
}

function migrateRulesStructure(options) {
  console.log('🔄 Migrating Rules to Product-Aware Structure v2.1.0...\n');
  
  const oldRulesPath = path.join(process.cwd(), 'Resources', 'rules');
  const newRulesPath = path.join(process.cwd(), 'rules');
  
  if (!fs.existsSync(oldRulesPath)) {
    console.log('❓ No existing rules found at Resources/rules');
    console.log('💡 If your rules are in a different location, please move them manually');
    console.log('📚 See MIGRATION_GUIDE.md for detailed instructions');
    return;
  }
  
  try {
    console.log('📋 Migration Plan:');
    console.log('   • Backup existing rules');
    console.log('   • Create new product-specific structure');
    console.log('   • Move rules to appropriate product directories');
    console.log('   • Update rule files with product metadata\n');
    
    // Create backup
    const backupPath = `${oldRulesPath}-backup-${Date.now()}`;
    fs.cpSync(oldRulesPath, backupPath, { recursive: true });
    console.log(`✅ Backup created: ${backupPath}`);
    
    // Create new structure
    const commercePath = path.join(newRulesPath, 'configured-commerce');
    fs.mkdirSync(path.join(commercePath, 'frontend'), { recursive: true });
    fs.mkdirSync(path.join(commercePath, 'backend'), { recursive: true });
    fs.mkdirSync(path.join(commercePath, 'general'), { recursive: true });
    fs.mkdirSync(path.join(newRulesPath, 'shared'), { recursive: true });
    
    // Create CMS structure
    const cmsPath = path.join(newRulesPath, 'cms-paas');
    fs.mkdirSync(path.join(cmsPath, 'content-types'), { recursive: true });
    fs.mkdirSync(path.join(cmsPath, 'templates'), { recursive: true });
    fs.mkdirSync(path.join(cmsPath, 'general'), { recursive: true });
    
    console.log('✅ Created new directory structure');
    
    // Move files
    const rulesFiles = fs.readdirSync(oldRulesPath).filter(f => f.endsWith('.mdc'));
    
    rulesFiles.forEach(file => {
      const sourcePath = path.join(oldRulesPath, file);
      let targetPath;
      
      if (file.includes('blueprint')) {
        targetPath = path.join(commercePath, 'frontend', file);
      } else if (file.includes('extension') || file.includes('handler')) {
        targetPath = path.join(commercePath, 'backend', file);
      } else if (file.includes('project-structure')) {
        targetPath = path.join(commercePath, 'general', file);
      } else if (file.includes('perfection')) {
        targetPath = path.join(newRulesPath, 'shared', file);
      } else {
        targetPath = path.join(commercePath, 'general', file);
      }
      
      fs.copyFileSync(sourcePath, targetPath);
      console.log(`   📄 Moved ${file} to ${path.relative(process.cwd(), targetPath)}`);
    });
    
    console.log('\n✅ Migration completed successfully!');
    console.log('\n📚 Next Steps:');
    console.log('   1. Review the new structure in: rules/');
    console.log('   2. Update rule files with product frontmatter (see MIGRATION_GUIDE.md)');
    console.log('   3. Set OPTIDEVDOC_RULES_PATH environment variable:');
    console.log(`      export OPTIDEVDOC_RULES_PATH="${newRulesPath}"`);
    console.log('   4. Test with: optidevdoc detect');
    
  } catch (error) {
    console.error('❌ Migration failed:', error.message);
    console.log('📚 Please see MIGRATION_GUIDE.md for manual migration steps');
  }
}

function setupIDEConfiguration() {
  console.log(`
🛠️  OptiDevDoc v2.1.0 IDE Setup - Product-Aware Configuration

To configure OptiDevDoc with your IDE, add the following to your MCP configuration:

For Cursor IDE (.cursor/mcp.json):
{
  "mcpServers": {
    "optidevdoc": {
      "command": "optidevdoc",
      "args": ["mcp"],
      "env": {
        "DEBUG_MCP": "false",
        "OPTIDEVDOC_MULTI_PRODUCT": "true",
        "OPTIDEVDOC_VERSION": "2.1.0"
      }
    }
  }
}

For VS Code (settings.json):
{
  "mcp.servers": {
    "optidevdoc": {
      "command": "optidevdoc",
      "args": ["mcp"],
      "env": {
        "OPTIDEVDOC_MULTI_PRODUCT": "true"
      }
    }
  }
}

Available Tools (v2.1.0):
✅ apply_development_rules    - Apply context-aware development rules with automatic product detection
✅ detect_product             - Analyze project to identify Optimizely product with enhanced patterns
✅ generate_cursor_config     - Generate IDE configuration with product-aware rules
✅ search_optimizely_docs     - Enhanced documentation search with product filtering
✅ find_optimizely_pattern    - Pattern search by development scenario with product isolation
✅ analyze_optimizely_bug     - Bug analysis with product-specific solutions

🎯 v2.1.0 Product-Aware Features:
✨ Automatic product detection based on project structure analysis
✨ Rules isolated by Optimizely product (Commerce, CMS, DXP, etc.)
✨ Context-sensitive guidance for your specific product
✨ Zero cross-product rule contamination
✨ Enhanced migration tools for existing configurations
✨ Flexible rule sources (local, remote, documentation APIs)

After configuration, restart your IDE to enable OptiDevDoc v2.1.0.
  `);
}

function startMCPClient(isEnhanced = true, options = {}) {
  console.error(`🚀 Starting ${isEnhanced ? 'Enhanced Product-Aware' : 'Simple'} OptiDevDoc MCP Client v2.1.4...`);
  
  // Use the main compiled JS entry points instead of TypeScript files
  const mainServerPath = path.join(__dirname, '..', 'index.js');
  const fallbackServerPath = path.join(__dirname, '..', 'main.js');
  
  if (fs.existsSync(mainServerPath)) {
    console.error('🎯 Using Enhanced Server with Product-Aware features');
    
    const env = { ...process.env };
    if (options.debug) {
      env.DEBUG_MCP = 'true';
    }
    env.OPTIDEVDOC_MULTI_PRODUCT = 'true';
    env.OPTIDEVDOC_VERSION = '2.1.0';
    env.OPTIDEVDOC_MODE = isEnhanced ? 'enhanced' : 'simple';

    const child = spawn('node', [mainServerPath], {
      stdio: 'inherit',
      env
    });

    child.on('error', (error) => {
      console.error('❌ Failed to start Enhanced MCP client:', error);
      if (isEnhanced) {
        console.error('🔄 Falling back to simple mode...');
        startMCPClient(false, options);
      } else {
        fallbackToRemote(options);
      }
    });

    child.on('exit', (code) => {
      process.exit(code || 0);
    });
    
  } else if (fs.existsSync(fallbackServerPath)) {
    console.error('📋 Using Fallback Server');
    
    const env = { ...process.env };
    if (options.debug) {
      env.DEBUG_MCP = 'true';
    }
    env.OPTIDEVDOC_VERSION = '2.1.0';

    const child = spawn('node', [fallbackServerPath], {
      stdio: 'inherit',
      env
    });

    child.on('error', (error) => {
      console.error('❌ Failed to start Fallback MCP client:', error);
      fallbackToRemote(options);
    });

    child.on('exit', (code) => {
      process.exit(code || 0);
    });
    
  } else {
    console.error('❌ No server files found');
    console.error(`❌ Expected: ${mainServerPath} or ${fallbackServerPath}`);
    fallbackToRemote(options);
  }
}

function fallbackToRemote(options = {}) {
  if (fs.existsSync(remoteClientPath)) {
    console.error('🌐 Falling back to remote client...');
    const remoteChild = spawn('node', [remoteClientPath], {
      stdio: 'inherit',
      env: { 
        ...process.env,
        DEBUG_MCP: options.debug ? 'true' : undefined
      }
    });
    
    remoteChild.on('exit', (code) => {
      process.exit(code || 0);
    });
  } else {
    console.error('❌ All fallback options exhausted');
    console.error('❌ Please reinstall the package: npm install -g optidevdoc');
    process.exit(1);
  }
}

function startServer(isEnhanced = false, options = {}) {
  const port = options.port || 3000;
  
      console.log(`🚀 Starting ${isEnhanced ? 'Enhanced Product-Aware' : 'Simple'} OptiDevDoc Server v2.1.1 on port ${port}...`);
  
  // Use direct node execution instead of npm run scripts
  const mainServerPath = path.join(__dirname, '..', 'index.js');
  const fallbackServerPath = path.join(__dirname, '..', 'main.js');
  
  const env = { 
    ...process.env, 
    PORT: port.toString(),
    OPTIDEVDOC_SERVER_MODE: 'http'
  };
  
  if (isEnhanced) {
    env.OPTIDEVDOC_MULTI_PRODUCT = 'true';
    env.OPTIDEVDOC_VERSION = '2.1.0';
    env.OPTIDEVDOC_MODE = 'enhanced';
  }
  
  const serverPath = fs.existsSync(mainServerPath) ? mainServerPath : fallbackServerPath;
  
  if (!fs.existsSync(serverPath)) {
    console.error('❌ Server files not found');
    console.error('❌ Please reinstall the package: npm install -g optidevdoc');
    process.exit(1);
  }

  const child = spawn('node', [serverPath], {
    stdio: 'inherit',
    env
  });

  child.on('error', (error) => {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  });

  child.on('exit', (code) => {
    process.exit(code || 0);
  });
}

// Parse command line arguments
const args = process.argv.slice(2);
const options = {};

// Extract options
for (let i = args.length - 1; i >= 0; i--) {
  if (args[i] === '--debug') {
    options.debug = true;
    args.splice(i, 1);
  } else if (args[i] === '--help') {
    printUsage();
    process.exit(0);
  } else if (args[i] === '--port' && args[i + 1]) {
    options.port = parseInt(args[i + 1], 10);
    args.splice(i, 2);
  }
}

const command = args[0];

switch (command) {
  case 'mcp':
    startMCPClient(true, options);
    break;
    
  case 'mcp-simple':
    startMCPClient(false, options);
    break;
    
  case 'serve':
    startServer(false, options);
    break;
    
  case 'serve-enhanced':
    startServer(true, options);
    break;
    
  case 'detect':
    detectOptimizelyProduct(options);
    break;
    
  case 'migrate':
    migrateRulesStructure(options);
    break;
    
  case 'setup':
    setupIDEConfiguration();
    break;
    
  case 'version':
    printVersion();
    break;
    
  default:
    if (!command) {
      printUsage();
    } else {
      console.error(`❌ Unknown command: ${command}`);
      console.error('Run "optidevdoc --help" for usage information.');
      process.exit(1);
    }
} 