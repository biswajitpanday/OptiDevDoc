{
  "mcpServers": {
    "optidevdoc": {
      "command": "node",
      "args": [
        "-e",
        "console.log('OptiDevDoc: Using remote server at https://optidevdoc.onrender.com'); const https = require('https'); process.stdin.on('data', (data) => { try { const req = JSON.parse(data.toString()); if (req.method === 'tools/list') { console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, result: { tools: [{ name: 'search-optimizely-docs', description: 'Search Optimizely documentation for code examples and guides', inputSchema: { type: 'object', properties: { query: { type: 'string', description: 'Search query for Optimizely documentation' }, product: { type: 'string', description: 'Filter by Optimizely product', enum: ['configured-commerce', 'cms-paas', 'cms-saas', 'experimentation', 'odp'] }, maxResults: { type: 'number', description: 'Maximum number of results (default: 10)' } }, required: ['query'] } }] } })); } else if (req.method === 'tools/call' && req.params.name === 'search-optimizely-docs') { const options = { hostname: 'optidevdoc.onrender.com', port: 443, path: '/api/search', method: 'POST', headers: { 'Content-Type': 'application/json', 'User-Agent': 'OptiDevDoc-MCP-Client' } }; const apiReq = https.request(options, (res) => { let responseData = ''; res.on('data', (chunk) => responseData += chunk); res.on('end', () => { try { const apiResponse = JSON.parse(responseData); const formattedResults = apiResponse.results?.map(doc => `**${doc.title}**\\n\\nProduct: ${doc.product}\\nURL: ${doc.url}\\n\\n${doc.content.substring(0, 1000)}${doc.content.length > 1000 ? '...' : ''}\\n\\n---\\n`).join('\\n') || 'No results found'; console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, result: { content: [{ type: 'text', text: `Found ${apiResponse.total_count || 0} results for \"${apiResponse.query}\":\\n\\n${formattedResults}` }] } })); } catch (e) { console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, error: { code: -32603, message: 'Failed to parse API response' } })); } }); }); apiReq.on('error', (e) => { console.log(JSON.stringify({ jsonrpc: '2.0', id: req.id, error: { code: -32603, message: 'API request failed: ' + e.message } })); }); apiReq.write(JSON.stringify(req.params.arguments)); apiReq.end(); } } catch (e) { console.error('MCP Error:', e); } });"
      ],
      "env": {
        "OPTIDEVDOC_URL": "https://optidevdoc.onrender.com"
      }
    }
  }
} 